blueprint:
  name: "Aktor nach datetime_helper steuern"
  description: "Schaltet einen Aktor ein/aus, wenn der datetime_helper on/off und ein Mindestbatteriestand erreicht ist. Optional kann eine Benachrichtigung gesendet werden."
  domain: automation
  input:
    standard_section:
      name: "Sensoren"
      input:
        switch_entity:
          name: "⚙️ Schaltbarer Aktor"
          description: "Das Gerät, das geschaltet werden soll."
          selector:
            entity:
              domain: switch
        battery_entity:
          name: "⚙️ Batteriestand-Sensor"
          description: "Der Sensor, der den Ladezustand des Batteriespeichers angibt."
          selector:
            entity:
              domain: sensor
        battery_level:
          name: "Mindestbatteriestand"
          description: "Mindestbatteriestand in Prozent."
          default: 50
          selector:
            number:
              min: 0
              max: 100
              unit_of_measurement: "%"
        schedule:
          name: "Zeitplan"
          description: "Der Zeitplan, wann geschaltet werden soll."
          selector:
            entity:
              domain: schedule
        # notify:
        #   name: "⏰ Benachrichtigung aktivieren"
        #   description: "Soll eine Benachrichtigung gesendet werden, wenn der Aktor geschaltet wird?"
        #   default: false
        #   selector:
        #     boolean:
        # notify_title:
        #   name: "Titel der Benachrichtigung"
        #   description: "Wie soll der Titel der Benachrichtigung lauten."
        #   default: "Shelly"
        #   selector:
        #     text:

mode: single
max_exceeded: silent

triggers:
  - trigger: state
    entity_id: !input schedule
    to: "on"
    id: turn_on
  - trigger: state
    entity_id: !input schedule
    to: "off"
    id: turn_off   
conditions:
  - condition: numeric_state
    entity_id: !input battery_entity
    above: !input battery_level
actions:
  - choose:
      - conditions:
          - condition: trigger
            id: turn_on
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input switch_entity
          # - if:
          #     - condition: template
          #       value_template: "{{ !input.notify }}"
          #   then:
          #     - service: notify.notify
          #       data:
          #         title: "!input.notify_title"
          #         message: "Der Aktor {{ !input.switch_entity }} wurde eingeschaltet."
      - conditions:
          - condition: trigger
            id: turn_off
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input switch_entity

