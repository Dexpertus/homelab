blueprint:
  name: "Aktor nach Batteriestand und Zeit steuern"
  description: "Schaltet einen Aktor ein, wenn der Batteriestand zu bestimmten Zeiten an einem bestimmten Wochentag hoch genug ist, und schaltet ihn nach einer bestimmten Zeit automatisch wieder aus. Optional kann eine Benachrichtigung gesendet werden."
  domain: automation
  input:
    switch_entity:
      name: "Schaltbarer Aktor"
      description: "Das Gerät, das geschaltet werden soll."
      selector:
        entity:
          domain: switch
    battery_entity:
      name: "Batteriestand-Sensor"
      description: "Der Sensor, der den Ladezustand des Batteriespeichers angibt."
      selector:
        entity:
          domain: sensor
    default_battery_level:
      name: "Standard-Mindestbatteriestand"
      description: "Standardwert für den Mindestbatteriestand in Prozent. Kann pro Tag überschrieben werden."
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    notify:
      name: "Benachrichtigung aktivieren"
      description: "Soll eine Benachrichtigung gesendet werden, wenn der Aktor geschaltet wird?"
      default: false
      selector:
        boolean:
    notify_entity:
      name: "Benachrichtigungsdienst"
      description: "Der Benachrichtigungsdienst, an den die Meldung gesendet werden soll."
      default: ""
      selector:
        entity:
          domain: notify
          multiple: false
    monday:
      name: "Montag"
      description: "Zeiten und Mindestbatteriestände für Montag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    tuesday:
      name: "Dienstag"
      description: "Zeiten und Mindestbatteriestände für Dienstag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    wednesday:
      name: "Mittwoch"
      description: "Zeiten und Mindestbatteriestände für Mittwoch."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    thursday:
      name: "Donnerstag"
      description: "Zeiten und Mindestbatteriestände für Donnerstag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    friday:
      name: "Freitag"
      description: "Zeiten und Mindestbatteriestände für Freitag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    saturday:
      name: "Samstag"
      description: "Zeiten und Mindestbatteriestände für Samstag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    sunday:
      name: "Sonntag"
      description: "Zeiten und Mindestbatteriestände für Sonntag."
      default: []
      selector:
        object:
          multiple: true
          options:
            - name: "Zeit"
              selector:
                time:
            - name: "Mindestbatteriestand"
              selector:
                number:
                  min: 0
                  max: 100
                  unit_of_measurement: "%"
    duration:
      name: "Einschaltdauer"
      description: "Wie lange der Aktor eingeschaltet bleiben soll (in Sekunden)."
      default: 3600
      selector:
        number:
          min: 1
          max: 86400
          unit_of_measurement: "s"

automation:
  - alias: "Schalte Aktor nach Batterielevel und Zeit"
    trigger:
      - platform: time_pattern
        minutes: "/1"
    condition:
      - condition: template
        value_template: >-
          {% set day = now().strftime('%A').lower() %}
          {% set times = !input[day] %}
          {% set default_level = !input.default_battery_level | float %}
          {% for entry in times %}
            {% set min_battery_level = entry["Mindestbatteriestand"] | default(default_level) | float %}
            {% if entry["Zeit"] == now().strftime('%H:%M:%S') and states(!input.battery_entity) | float >= min_battery_level %}
              {{ true }}
            {% endif %}
          {% endfor %}
          {{ false }}
    action:
      - service: switch.turn_on
        target:
          entity_id: !input switch_entity
      - if:
          - condition: template
            value_template: "{{ !input.notify }}"
        then:
          - service: notify.notify
            target:
              entity_id: !input notify_entity
            data:
              message: "Der Aktor {{ !input.switch_entity }} wurde eingeschaltet."
      - delay: "00:00:{{ !input.duration }}"
      - service: switch.turn_off
        target:
          entity_id: !input switch_entity
